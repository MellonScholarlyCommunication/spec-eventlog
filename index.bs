<pre class='metadata'>
Title: Artefact Lifecycle Event Log
Shortname: eventlog
Level: 1
Status: LS
URL: https://mellonscholarlycommunication.github.io/spec-eventlog
Editor: Miel Vander Sande, [meemoo - Flemish Institute for Archives](https://meemoo.be), miel.vandersande@meemoo.be
Editor: Patrick Hochstenbach, [IDLab - Ghent University](https://knows.idlab.ugent.be), patrick.hochstenbach@ugent.be
Editor: Ruben Dedecker, [IDLab - Ghent University](https://knows.idlab.ugent.be), ruben.dedecker@ugent.be
Editor: Jeroen Werbrouck, [IDLab - Ghent University](https://knows.idlab.ugent.be), Jeroen.Werbrouck@ugent.be
Abstract: This document specifies the requirements for implementing and hosting an Artefact Lifecycle Event Log.
Markup Shorthands: markdown yes
</pre>

<style>
table {
  margin: 25px auto;
  border-collapse: collapse;
  border: 1px solid #eee;
  border-bottom: 2px solid #005A9C;
}
table tr:hover {
  background: #f4f4f4;
}
table tr:hover td {
  color: #555;
}
table th, table td {
  color: #999;
  border: 1px solid #eee;
  padding: 12px 12px;
  border-collapse: collapse;
}
table th {
  background: #005A9C;
  color: #fff;
}
table th.last {
  border-right: none;
}
</style>

Set of documents {#set}
=======================

This document is one of the specifications produced by the **ResearcherPod** and **ErfgoedPod** project:

1. [Overview](/spec-overview/)
2. [Orchestrator](/spec-orchestrator/) 
3. [Data Pod](/spec-datapod/)
4. [Rule language](/spec-rulelanguage/)
5. [Artefact Lifecycle Event Log](/spec-eventlog/) (this document)
6. [Notifications](/spec-notifications/)
7. [Collector](/spec-collector/)

Introduction {#intro}
=====================
In a decentralized network,
an artefact can be shared between actors and processed by a multitude of services,
each appending to the artefact's lifecycle.
Hence, for each artefact, a series of lifecycle events is distributed over the network.
This document introduces the *Artefact Lifecycle Event Log*, 
a mechanism to ensure the recording and discovery of these events.

An [=Artefact Lifecycle Event Log=] is an artefact-centric, append-only, public Web resource that exposes a series of lifecycle events.
Events are recorded in a standardized format to ensure network-wide interoperability.
In most common cases, the [=Artefact Lifecycle Event Log=] is an [[LDP]] Resource that is part of a Solid data pod.
This document describes

- the resource definition of the [=Artefact Lifecycle Event Log=];
- the creation and linking process;
- a data format for noting lifecycle events;
- the addition, discovery and retrieval process for Event information in the log.

# Document Conventions # {#conventions}

Within this document, the following namespace prefix bindings are used: 

<table>
<thead>
<tr>
<th>Prefix
<th>Namespace
<tbody>
<tr>
<td>as
<td>https://www.w3.org/ns/activitystreams#
<tr>
<td>ldes
<td>https://w3id.org/ldes#
<tr>
<td>st
<td>http://www.w3.org/ns/st#
<tr>
<td>acl
<td>http://www.w3.org/ns/auth/acl#
<tr>
<td>hydra
<td>http://www.w3.org/ns/hydra/core#
<tr>
<td>daen
<td>http://www.w3.org/ns/solid/daen#
</table>

Note: All required URIs for any term that currently has no namespace are defined as: <code>https://ournamespace.org/&lt;TERM&gt;</code>

Applications of the Artefact Lifecycle Event Log
================================================

A [=Decentralized Artefact Exchange Network=] can support communities in the exchange of digital artefacts and services without the need of a central authority.
Data about these exchanges is therefore distributed over every actor in the network.
This intensifies an actor's control over its data and severly reduces data duplication, 
but also makes it more difficult to get a clear picture about an artefact's history.
There is no longer a single go-to trusted authority that records and certifies who applied what services to an artefact and when.
In a [=Decentralized Artefact Exchange Network=], 
this information needs to be collected from different actors with varying levels of trust.
The [=Artefact Lifecycle Event Log=] provides basic groundwork for publishing artefact lifecycles and thus supporting this collection process. 

In short,
an [=Artefact Lifecycle Event Log=] registers lifecycle events that the [=Decentralized Artefact Exchange Network=] instance desires to be to be publicly disclosed.
This is determined by the nature of the network, the use cases it supports, and how lifecycle information is employed.
Typically, a network instance requires these events to be common knowledge to guarentee its well-functioning. 
For instance, a food network might desire the publication of a completed health inspection process.
It is therefore assumed that the dominant fraction of participating actors will experience sufficient incentive to host a [=Decentralized Artefact Exchange Network=] available to all actors in the network; and accurately record the selected lifecycle events.
This pragmatic approach is needed because no decentralized design can force actors to comply,
while maintaining truly scalable.

This document offers a minimal semantic data model to construct and publish artefact lifecycle events, which serves as a basis for technical interoperability, 
It is expected that a community that employs an instance of a [=Decentralized Artefact Exchange Network=], extends this model with domain-specific event types that provide more meaning and understanding within the network instance.
A community can also leverage lifecycle information as they see fit, resulting in one or more applications of the [=Artefact Lifecycle Event Logs=].
Some probable applications are given below: 

- **Establishing trust in the integrity of an artefact**

In some domains, 
an artefact's value depends on its reconstructed lifecycle and whether this lifecycle can be trusted.
For instance, 
in scholarly communication, 
a publication gains status after it has been certified by a certification service (eg. by a peer review process).
Such lifecycle event should be registered in the [=Artefact Lifecycle Event Logs=] of both parties.
When reconstructing the artefact's lifecycle to assess its integrity, 
encountering such events in multiple places increases the trust.

- **Discovering entities on the network**

A process that collects decentralized information needs a way to navigate the network and discover new artefacts.
Given the potential size of the network, 
many data pods are still unknown when this process starts.
Discovering unknown pods relies on existing links between actors and artefacts.
Therefore, an [=Artefact Lifecycle Event Log=] can be used to find these links and serve as a routing mechanism.
For instance, 
in a digital heritage network, 

- **Gaining insight in the provenance of artefacts**

Issue: todo



High-level overview {#high-level}
=================================
The <dfn>Artefact Lifecycle Event Log</dfn> is a standardized mechanism for the storage and discovery of artefact lifecycle event information. 


Data format
=================================

Linked Data Platform BasicContainer (LDP-DC)


<pre class=include-code>
path: examples/basic.ttl
highlight: turtle
show: 
</pre>


## Types



<table>
<tr>
<th>Type
<th>Description
<tr>
<td><a href="">daen:ArtefactLifecycleEventLog</a>
<td>The 
<tr>
<td><a href="">daen:LifecycleEvent</a>
<td>
<tr>
<td><a href="">daen:Maintainer</a>
<td>
<tr>
<td><a href="">daen:ServiceHub</a>
<td>
</table>


:ArtefactLifecycleEventLog rdfs:subClassOf prov:Collection

:LifecycleEvent rdfs:subClassOf prov:Activity



## Vocabulary

```
:log a prov:Collection.

:ev1
   a prov:Activity;
   prov:startedAtTime    "2011-07-14T01:01:01Z"^^xsd:dateTime;
   prov:wasAssociatedWith :Bob;
   prov:used              :Artefact;
   prov:endedAtTime      "2011-07-14T02:02:02Z"^^xsd:dateTime.

```



## List of events













Creating a log {#creating}
===============================
For any resource in a network an Event Log can be created.
An Event Log MUST be made available in RDF turtle format, but may support other data formats through content negotiation.

Ay platform implementing the Event Log mechanism for storing events related to a resource MUST support the following functionality:
- A created Event Log MUST support functionality to make the Event Log discoverable from the resource in accordance to [](#linking). If an Event Log is created for a specific resource, this [linking](#linking) step MUST happen at creation time of the Event Log.
- A created Event Log MUST be consumable for authorized actors in the network in accordance to [](#consuming).
- A created Event Log MUST support the appending of Events by producers in accordance to [](#producing).
- A created Event Log MAY support the authorization mechanism as defined in [](#authorization) to authorize actors in the network to read an Event Log, append to an Event Log or change the permissions for an Event Log. The permissions required to create an Event Log will depend on the permissions of the platform in which the Event Log is created, and are out of scope for this document.
- A created Event Log MAY support validating Events before they can be added to the Event Log in accordance to [](#validation).

Linking {#linking}
===============================
This section describes the ways with which a resource can advertise a linked Event Log. These links can then be used by consumers to discover any linked Event Log to the resource and any related events, as well as by producers to append a new event to any Event Log linked by the resource.
This section describes all ways with which a resource can advertise a linked Event Log.
Any implementation of an Event Log MUST support at least [creating an in-body link](#create-in-body-link) in case of RDF or HTML resources OR [creating a Link header](#create-link-header).

## Adding an in-body link ## {#create-in-body-link}
In the case that the resource linking the Event log is an RDF or HTML resource, an Event Log implementation MAY choose to link the event log through a link in the resource body.

In case of an RDF resource located at <code>resourceURI</code>, any implementation linking an Event Log located at <code>eventLogURI</code> through an in-body link MUST add the following data triple to the document body:
</br>
<pre>
	&lt;resourceURI&gt; &lt;https://ournamespace.org/eventLog&gt; &lt;eventLogURI&gt;.
</pre>

In case of an HTML resource located at <code>resourceURI</code>, any implementation linking an Event Log located at <code>eventLogURI</code> through an in-body link MUST add use a Link element in the HTML body as follows:
<pre>
	&lt;link href="https://ournamespace.org/eventLog" rel="eventlog"&gt;
</pre>

## Adding a Link Header ## {#create-link-header}
Any resource with a linked Event Log that does not advertise this Event Log through an [in-body link](#create-in-body-link) MUST advertise this Event Log through a Link header in the server response as follows: 
<pre>
	Link: &lt;/EventLog&gt;; rel="eventlog".
</pre>


## From an external resource ## {#create-link-external-file}
Certain data formats may use an external resource to aggregate metadata and/or serve as an entrypoint for multiple resources.
The implementer MAY choose to aggregate the Event Log entities advertised by the aggregated resources in the aggregation resource, and advertise them from this resource OR the implementer may choose to advertise a single Event Log instane from the aggregation resource for all aggregated resources. 

In case of the latter, the aggregation resource located at <code>aggregationResourceURI</code> MUST be linked for all aggregated resources through EITHER an [in-body link](create-in-body-link) of the form:
<pre>
	&lt;link rel='meta' href='&lt;aggregationResourceURI&gt;' /&gt;
</pre> 
in case of a HTML resource and 
<pre>
	&lt;resourceURI&gt; &lt;rdf:seeAlso&gt; &lt;aggregationResourceURI&gt;.
</pre> 
in case of an RDF resource OR using a [Link header](create-link-header) of the form:
<pre>
   Link: &lt;aggregationResourceURI&gt;; rel=meta
</pre>



## Using Shape Trees ## {#create-link-shape-tree}
In the Solid ecosystem, All created Event Log SHOULD be discoverable in the data pod through the pod [Shape Tree](https://shapetrees.org/).
This enables actors in the network to efficiently aggregate all Event data in the data pod for which they have Read permissions.

<div class="example">
```
// The Events folder contains EventLog containers
<#Events> st:expectsType st:ShapeTreeContainer ;
	st:contains <#EventStream> ; 

// An Event Log is a container in the Solid ecosystem containing Event resources.
<#EventStream> tree:expectsType st:ShapeTreeContainer ;
	st:contains <#Event> ;
	
// An Event resource is Validated by a base Event shape
<#Event> tree:expectsType st:ShapeTreeResource ;
	st:validatedBy <EventShape> ;

<EventShape> { ... }
```
</div>



Discovery {#discovery}
================================
An Event Log for any resource can be discovered by iterating over all approaches with which an Event Log can be Linked to a resource.
Any implementation discovering an Event Log MUST support the discovery of [in-body links](#discovery-in-body-link) AND [Link headers](#discovery-link-header) and MAY support discovering Event Logs through for the additional linking methods.
Any implementation MAY choose the order of execution for the different discovery steps.

## Discovery through in-body link ## {#discovery-in-body-link}
Any implementation MUST support discovery of an Event Log through an in-body link.
For this, the actor MUST make an HTTP HEAD or GET request on the target URL.
- In case of an HTML resource, the actor MUST look for a link element in the resource body with a rel value of https://ournamespace.org/eventLog.
- In case of an RDF resource, the actor MUST look for a data triple with a predicate value of https://ournamespace.org/eventLog. The object of this data triple is the URI of the EventLog.

## Discovery through Link Header ## {#discovery-link-header}
Any implementation MUST support discovery of an Event Log advertised through a Link header.
For this, the actor MUST make an HTTP HEAD or GET request on the target URL, and search for the Link header with a rel value of https://ournamespace.org/eventLog in the server response.

## Discovery through external resource ## {#discovery-link-external-file}
Any implementation MAY support the discovery of an Event Log through an external resource.
In this case, the actor MUST make an HTTP HEAD or GET request on the target URL.
The actor must search in the response headers for a Link header with a rel value of <em>meta</em> and in the response body for a link element with a rel value of  <em>meta</em> in the case of a HTML resource, or for a data triple with a predite value of <em>rdf:seeAlso</em> in case of an RDF resource.

In case an external resource is discovered this way, the actor SHOULD try the [discovery](#discovery) steps on this external resource.

## Discovery through Shape Trees ## {#discovery-shape-tree}
Any implementation MAY support the discovery of an Event Log through [shape trees](https://shapetrees.org/) defined in the data platform.

Appending to an Event Log {#producing}
======================================
To find the Event Log URI for a resource, an actor must first go through the [discovery](#discovery) step.
On discovery of an Event Log URI, the actor can start appending to the Event Log.
To append an event to the Event Log, the actor MUST send a POST request to the Event Log URI.
In case [authorization](#authorization) is enabled for the Event Log, the actor MUST have [append permissions](#authorization-append) to execute this action.

Before appending an event to the Event Log, the client SHOULD try to discover if [validation](#validation) is enabled for the Event Log. In case validation is enabled, the client SHOULD try to validate the event first on the client with the discovered validation link. 

Any event that is successfully posted and validated MUST be added to the Event Log.
The permissions for the event SHOULD per default be inherited from the Event Log permissions.

On a successful POST request, the event MUST be added on a URI <em>eventURI</em> and MUST be defined in the body of its Event Log with URI <em>eventLogURI</em> using an RDF triple of the form:
<pre>
	&lt;eventLogURI&gt; ldp:contains &lt;eventURI&gt; .
</pre>

## Pagination ## {#producing-pagination}
The Event Log MAY make use of pagination.
Any used pagination system MUST make sure that ALL events in the Event Log can be retrieved by following the available <em>next</em> links.
These links MUST be provided either as a Link header of the form:
<pre>
	Link: &lt;nextPageLocation&gt;; rel="next"
</pre>
or in the body of the Event Log / a retrieved page of the Event Log as a data triple:
<pre>
	&lt;eventLogURI&gt; hydra:next &lt;nextPageLocation&gt; .
</pre>
Any implementation MAY provide additional pagination support or filtering possibilities, and SHOULD advertise these using the appropriate mechanisms detailed by their specifications. 


Consuming an Event Log {#consuming}
===================================
First any actor wishing to consume the Events linked to a resource MUST discover any Event Log linked to the resource accoring to [](#discovery).
On discovery of an Event Log URI, the actor MUST make a GET request to the Event Log URI with a Content-Type header of the form:
<pre>
Accept: text/turtle
</pre>
On a succesful GET request on the Event Log URI <code>eventLogURI</code>, the actor can discover the URIs of the available events by processing the Event Log body for all data triples of the form:
<pre>
	&lt;eventLogURI&gt; ldp:contains &lt;eventURI&gt; .
</pre>
The consumer implementation MAY include alternate approaches to retrieving events from an Event Log, but MUST support this retrieval method.


## Pagination ## {#consuming-pagination}
Any consumer implementation MUST support pagination through following advertised <em>next</em> links.
On a GET request to an Event Log / Event Log page on URI <code>eventLogPageURI</code> with an Accept header of type <code>text/turtle</code>, the consumer MUST process the server response for a Link header with a rel value of <code>"next"</code>.
The response body MUST be processed to discover any data triples of the form:
<pre>
	&lt;eventLogPageURI&gt; hydra:next &lt;nextPageLocation&gt; .
</pre>
Any implementation MAY support additional advertised pagination or filtering approaches, but MUST support this approach for consuming a paginated Event Log.



Authorization {#authorization}
===============================
Any platform implementing the Event Log mechanism MAY support authorization for the following aspects of the Event Log mechanism:
- Reading access for an Event Log
- Append access for an Event Log
- Update permissions for an Event Log
- Reading access for a specific event in an Event Log
- Update permissions for a specific event in an Event Log

Any implementation of authorization for an Event Log MUST make use of [Web Access Control (WAC)](https://www.w3.org/wiki/WebAccessControl). 
The discovery of the ACL document for a resource MUST be done according to the [ACL spec](https://www.w3.org/wiki/WebAccessControl).
The setting of permissions for a resource happens by creating / updating the [ACL file](https://www.w3.org/wiki/WebAccessControl) for that resource.

NOTE: Depending of the course of the Solid Project, this dependency on WAC may be updated to include newer approaches to auhtorization, as the goal is to maintain compatibility with the Solid Project.

## Read authorization ## {#authorization-read}
Any actor with Read permissions set for an Event Log MUST be able to discover all Events in the Event Log to which the actor has Read permissions.
Any actor with Read permissions set for an Event Log SHOULD automatically have read permission for all the stored events, UNLESS explicitly defined otherwise by the individual events.
The implementation MAY restrict the actor from discovering events in the Event Log for which the actor does not have Read permissions.
Any actor without Read permissions for an Event Log SHOULD NOT be able to discover the Event in the Event Log, even if the actor has Read permissions for individual events in the Event Log.

## Append authorization  ## {#authorization-append}
Any actor with Append permissions set for an Event Log MUST be able to append Events to the Event Log.

Note: The implementation MAY decide to use EITHER acl:Write OR acl:Append as the permission to append events to the Event Log, but the platform MUST support the use of POST operations on the Event Log for the chosen permission.


## Update permissions authorization  ## {#authorization-permissions}
Any actor with Update permissions set for an Event Log MUST be able to edit permissions for all actors for the Event Log.
Any actor with Update permissions set for an Event Log MUST be able to edit permissions for all individual events in the Event Log UNLESS explicitly defined otherwise by the individual events.

## Event specific read authorization  ## {#authorization-specific-read}
Any actor with Read permissions set for an event MUST be able to read this event, and discover the event in the Event Log in the case of Read permissions for the Event Log.

## Event specific update permissions authorization  ## {#authorization-specific-update}
Any actor with Update permissions set for an event MUST be able edit permissions for all actors for this event.

Validation {#validation}
===============================
Any implementation of the Event Log mechanism MAY add support for validating events that are appended to the Event Log.
In case an actor tries to append an event to the Event Log that cannot be validated, the event MUST NOT be added to the Event Log and an appropriate 4xx error code must be returned.
The following sections define the different possibilities for providing a shape file, located at <code>shapeFileLocation</code>, to which an event MUST validate before it can be added to the Event Log.
If a shape file is advertised using any of the different methods described in the following sections, the server MUST validate all incoming requests to append an event to the Event Log and MUST reject all requests for which the event fails this validation step.

## Validation Link Header ## {#validation-link-header}
A request to the Event Log MAY return the following Link header:
<pre>
	Link: &lt;shapeFileLocation&gt;; rel=http://www.w3.org/ns/ldp#constrainedBy
</pre>
In this case, the server MUST validate all incoming requests to append an event to the Event Log for the advertised shape file.


## Validation in-body Link ## {#validation-in-body-link}
The Event Log MAY provide the following links in the resource body:
<pre>
	&lt;link rel='http://www.w3.org/ns/ldp#constrainedBy' href='&lt;shapeFileLocation&gt;'/&gt;
</pre>
in the case of an HTML resource, and 
<pre>
	&lt;eventLogURI&gt; &lt;http://www.w3.org/ns/ldp#constrainedBy&gt; &lt;shapeFileLocation&gt;.
</pre>
in case of an RDF resource.
In this case, the server MUST validate all incoming requests to append an event to the Event Log for the advertised shape file.
http://www.w3.org/ns/ldp#constrainedBy

## Shape Tree Validation ## {#validation-shape-tree}
In a Solid environment, the shape file to which all events in the Event Log must validate MAY be advertised using a st:validatedBy link in the [Shape Tree](https://shapetrees.org/).
In this case, the implementation SHOULD also advertise this shape file using EITHER [a link header](#validation-link-header) or [an in-body link](#validation-in-body-link).
<div class="example">
```

// An Event Log is a container in the Solid ecosystem containing Event resources.
<#EventStream> tree:expectsType st:ShapeTreeContainer ;
	st:contains <#Event> ;
	
// All event resources MUST validate for the advertised shape
<#Event> tree:expectsType st:ShapeTreeResource ;
	st:validatedBy <shapeFileLocation> ;
```
</div>



Implementation {#implementation}
========================
In this section, we provide implementation examples 

## Linked Data Event Streams and the Solid Platform ## {#implementation-solid}


An Event Log is defined as a [Linked Data Event Stream (LDES)](https://semiceu.github.io/LinkedDataEventStreams/eventstreams.html), a collection of immutable objects, each object being described using a set of RDF triples.

<div class="example">
<u><b>/EventLog</b></u>
```
<> a ldes:EventStream ;
	tree:shape <EventShape.shacl> ; 
	tree:member </Events/1>, </Events/2>, ... ;
	tree:view <?page=1> .

<#node> a tree:Node ;
    tree:relation [
        a tree:GreaterThanOrEqualToRelation ;
        tree:path dct:issued ;
        tree:node </pages/1#node> ;
        tree:value "2020-10-10T10:00:00Z"^^xsd:dateTime
     ] .
```
<hr>
<u><b>/pages/1</b></u>
```
</EventLog> a ldes:EventStream ;
	tree:shape <EventShape.shacl> ; 
	tree:member </Events/3>, </Events/4>, ... ;

<#node> a tree:Node ;
	void:subset </EventLog>;
```
</div>

Note: This example shows the Event Log as a Linked Data Event Stream, ordered according to the <code>dct:issued</code> value of the Events.



<img alt="…" src="images/peer_review_sequence.svg" style="width: 100%">

<img alt="…" src="images/review_aftermath.svg" style="width: 100%">



Spec roadmap {#roadmap}
====================================
## September ## {#september}
1. Work out full implementation details
	- target the Solid ecosystem
	- using the Event Streams Spec
	- update images of control flows (outdated)

2. Better definitions for minimal-requirements (do you need a full Solid implementation?) - low priority




<pre class=biblio>
{
	"solid-oidc": {
		"authors": [
			"Aaron Coburn (Inrupt)",
			"elf Pavlik",
			"Dmitri Zagidulin"
		],
		"href": "https://solid.github.io/authentication-panel/solid-oidc/",
		"title": "SOLID-OIDC",
		"status": "Editor’s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
	"solid-protocol": {
		"authors": [
			"Sarven Capadisli",
			"Tim Berners-Lee",
			"Ruben Verborgh",
			"Kjetil Kjernsmo",
			"Justin Bingham",
			"Dmitri Zagidulin"
		],
		"href": "https://solidproject.org/TR/protocol/",
		"title": "The Solid Protocol",
		"status": "Editor’s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
  "spec-overview": {
		"authors": [
      "Miel Vander Sande"
    ],
		"href": "http://mellonscholarlycommunication.github.io/spec-overview/",
		"title": "Overview of the ResearcherPod specifications",
		"status": "Editor’s Draft",
		"publisher": "ResearcherPod project"
	}
}
</pre>

# Acknowledgement

We thank Herbert Van de Sompel, [DANS + Ghent University](https://dans.knaw.nl/nl/), hvdesomp@gmail.com
for the valuable input during this project.