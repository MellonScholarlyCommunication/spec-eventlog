<pre class='metadata'>
Title: Artefact Lifecycle event log
Shortname: eventlog
Level: 1
Status: LS
URL: https://mellonscholarlycommunication.github.io/spec-eventlog
Editor: Miel Vander Sande, meemoo - [Flemish Institute for Archiving](https://meemoo.be), miel.vandersande@meemoo.be
Editor: Patrick Hochstenbach, Ghent University, patrick.hochstenbach@ugent.be
Editor: Ruben Dedecker, Ghent University, ruben.dedecker@ugent.be
Editor: Jeroen Werbrouck, Ghent University, Jeroen.Werbrouck@ugent.be
Abstract: This document specifies the requirements for implementing and hosting an Artefact Lifecycle event log.
Markup Shorthands: markdown yes
</pre>

<style>
table {
  margin: 25px auto;
  border-collapse: collapse;
  border: 1px solid #eee;
  border-bottom: 2px solid #005A9C;
}
table tr:hover {
  background: #f4f4f4;
}
table tr:hover td {
  color: #555;
}
table th, table td {
  color: #999;
  border: 1px solid #eee;
  padding: 12px 12px;
  border-collapse: collapse;
}
table th {
  background: #005A9C;
  color: #fff;
}
table th.last {
  border-right: none;
}
</style>

Set of documents {#set}
=======================

This document is one of the specifications produced by the **ResearcherPod** and **ErfgoedPod** project:

1. [Overview](/spec-overview/)
2. [Orchestrator](/spec-orchestrator/) 
3. [Data Pod](/spec-datapod/)
4. [Rule language](/spec-rulelanguage/)
5. [Artefact Lifecycle event log](/spec-eventlog/) (this document)
6. [Notifications](/spec-notifications/)

Introduction {#intro}
=====================
An event log is a collection of events that describes the lifecycle of one or more resources.
It builds upon the [Linked Data Event Streams specification](https://semiceu.github.io/LinkedDataEventStreams/eventstreams.html)
This document outlines the requirements for an event log.

# Definitions

This document uses the following defined terms from [[spec-overview]]:

- <dfn export>Actor</dfn>
- <dfn export>Artefact</dfn>
- <dfn export>Maintainer</dfn>
- <dfn export>Data Pod</dfn>
- <dfn export>Inbox</dfn>
- <dfn export>Artefact Lifecycle event log</dfn>
- <dfn export>Service Hub</dfn>
- <dfn export>Policy</dfn>
- <dfn export>Dashboard</dfn>

High-level overview {#high-level}
=================================
An event log is a collection of immutable events that form the lifecycle of one or more resources.
An Event log is advertised by resources as described in [](#discovery).
Events can be retrieved for a resource by discoverying the event log of a resource, and retrieving all defined events 
Events can be added to the event log, and can be retrieved


The event log protocol defines the approach to store and retrieve events of online resources published over the Web.
Any Web resource can advertise an event log by EITHER providing a LINK header: 
<pre>Link: &lt;/EventLog&gt;; rel="eventlog".</pre>
In this document, we assume all actors have the correct permissions set for all actions unless explicitly specified.

<img alt="..." src="images/protocol_based_versioning.svg" class="myimg">

Creation {#create}
===============================
For every resource published over a network, an event log can be created.
An event log is defined as a [Linked Data Event Stream (LDES)](https://semiceu.github.io/LinkedDataEventStreams/eventstreams.html), a collection of immutable objects, each object being described using a set of RDF triples0.

<div class="example">
<u><b>/EventLog</b></u>
```
<> a ldes:EventStream ;
	tree:shape <EventShape.shacl> ; 
	tree:member </Events/1>, </Events/2>, ... ;
	tree:view <?page=1> .

<#node> a tree:Node ;
    tree:relation [
        a tree:GreaterThanOrEqualToRelation ;
        tree:path dct:issued ;
        tree:node </pages/1#node> ;
        tree:value "2020-10-10T10:00:00Z"^^xsd:dateTime
     ] .
```
<hr>
<u><b>/pages/1</b></u>
```
</EventLog> a ldes:EventStream ;
	tree:shape <EventShape.shacl> ; 
	tree:member </Events/3>, </Events/4>, ... ;

<#node> a tree:Node ;
	void:subset </EventLog>;
```
</div>

Note: This example shows the event log as a Linked Data Event Stream, ordered according to the <code>dct:issued</code> value of the Events.


Linking {#linking}
===============================
There are multiple ways for a resource to advertise their event log.

## Adding an in-body link ## {#create-in-body-link}
In case the original resource is an RDF resource, a link to the event log MAY be added to the resource body by adding a triple:
</br>
<code>
	&lt;resourceURI&gt; &lt;https://mydatapod.com/EventLog&gt; &lt;eventLogURI&gt;.
</code>
</br>
In case the original resource is an HTML resource, a link to the event log MAY be added as a Link element in the HTML body as follows:
</br>
<code>
	&lt;link href="https://mydatapod.com/EventLog" rel="eventlog"&gt;
</code>

## Adding a Link Header ## {#create-link-header}
On any Web resource, a Link header to the event log MAY be added of the form: 
</br>
<code>Link: &lt;/EventLog&gt;; rel="eventlog".</code>
</br>

## From a separate file ## {#create-link-seheaderparate-file}
Certain data formats use specific files to aggregate metadata or serve as an entrypoint for multiple resources.
These files MUST advertise any connected eventlog using EITHER an [in-body link](create-in-body-link) OR using a [Link header](create-link-header).


## Using Shape Trees ## {#create-link-seheaderparate-file}
In the Solid ecosystem, event logs SHOULD be added to the Solid data pod [Shape Tree](https://shapetrees.org/).
This enables applications to discover the location of event logs in the data pod.

<div class="example">
```
// The Events folder contains eventstream containers
<#Events> st:expectsType st:ShapeTreeContainer ;
	st:contains <#EventStream> ; 


// An Event Stream contains Events
<#EventStream> tree:expectsType st:ShapeTreeContainer ;
	st:contains <#Event> ;
	
// An Event is Validated by a base Event shape
<#Event> tree:expectsType st:ShapeTreeResource ;
	st:validatedBy <EventShape> ;

<EventShape> { ... }
```
</div>


Discovery {#discovery}
================================
An <em>event log</em>, the data structure where events can be appended and read, can be discovered from any resrouce.
The starting point for the discovery is the resource that the event is about: the <em>target</em>.
Choosing the most appropriate target resource from which to begin discovery is at the discretion of the creator or consumer, since any resource (RDF or non-RDF) may have its own event log.

Senders and creators do the following to discover the event log URL:

- make an HTTP HEAD or GET request on the target URL, and use the Link header with a rel value of https://w3id.org/ldes#eventStream.
- make an HTTP GET request on the target URL to retrieve an HTML representation that contains a link HTML element with a rel value of https://w3id.org/ldes#eventStream. The href value of that link element is the event log.
- make an HTTP GET request on the target URL to retrieve an RDF representation, whose encoded RDF graph contains a relation of type https://w3id.org/ldes#eventStream. The subject of that relation is target and the object is the event log.


Any actor in the network with READ access to a resource MUST be able to discover any event log advertised by this resource.
As event logs can be 
Discovering an event log may require multiple approaches to be tried depending on the way they are implemented by the server.
A client discovering an event log SHOULD try all approaches to discover an event log for a resource.

An event log can be discovered with multiple approaches, depending on the way they are implemented.

## In-Body Link ## {#discovery-in-resource}
Any resource using an event log to store related events MAY advertise this event log using an in-body link.
In the case of a resource using an RDF format, the link to the event log MUST be defined as a triple 
<pre>
	<resourceURI> <https://w3id.org/ldes#eventStream>  as can be defined using  using a Link header OR with an in-body link.
</pre>

## RDF Resource ## {#discovery-rdf}
Any RDF resource using an event log to store related events MUST advertise this event log EITHER using a Link header OR with an in-body link.





Events {#events}
================
An Event in the event log MUST contain the following properties:
- id: This must be a URI

Appending to an event log {#append}
===================================
Any actor in the network with the correct permissions MUST be able to append events to the event log.
The event log MAY impose constraints on the events that can be appended to the event log (e.g., SHACL, Web Annotation Protocol) via an HTTP Link header or body of the resource with a rel value of http://www.w3.org/ns/ldp#constrainedBy.
Actors adding an event to the event log should comply with constraint specifications or the event log may reject their event and return an appropriate 4xx error code.



Reading an event log {#read}
============================
An event log must be 

## Reading all events of a resource ## {#read-all}

## Reading events tied to specific resource versions ## {#read-all}

## Reading all events of a resource ## {#read-all}





Events {#events}
========================
In this section, we go over the specific requirements for **Events** stored in the event log.


Implementation {#append}
========================
In this section, we provide implementation examples 

map LDP Container => EventLog
ldp:contains => events


## Solid Platform Implementation ## {#implementation-solid}






<pre class=biblio>
{
	"solid-oidc": {
		"authors": [
			"Aaron Coburn (Inrupt)",
			"elf Pavlik",
			"Dmitri Zagidulin"
		],
		"href": "https://solid.github.io/authentication-panel/solid-oidc/",
		"title": "SOLID-OIDC",
		"status": "Editorâ€™s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
	"solid-protocol": {
		"authors": [
			"Sarven Capadisli",
			"Tim Berners-Lee",
			"Ruben Verborgh",
			"Kjetil Kjernsmo",
			"Justin Bingham",
			"Dmitri Zagidulin"
		],
		"href": "https://solidproject.org/TR/protocol/",
		"title": "The Solid Protocol",
		"status": "Editorâ€™s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
  "spec-overview": {
		"authors": [
      "Miel Vander Sande"
    ],
		"href": "http://mellonscholarlycommunication.github.io/spec-overview/",
		"title": "Overview of the ResearcherPod specifications",
		"status": "Editorâ€™s Draft",
		"publisher": "ResearcherPod project"
	}
}
</pre>